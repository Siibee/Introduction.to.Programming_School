#Create a script called ShapeManager.py. For this exercise, you are required to create multiple classes.
#Each of the classes should be created as their own modules and imported as necessary:
#
#
# Shape 
#A counter for keeping track of all shapes created. This counter should be incremented whenever a shape is created. 
#An instance variable for storing a description of the shape. 
#An override of the str() method which returns the description of the shape as well as it's area and volume. 
#A method, area(), which calculates and returns the area of the Shape.
#Since the shape has no real details to calculate the area, this method should return 0. 
#A method, volume(), which calculates and returns the volume of the Shape.
#Since the shape has no real details to calculate the volume, this method should return 0.
#TwoDimensionalShape 
#This is a more specific form of Shape and should derive from Shape. 
#It needs to include an override of the str() method which returns that this is a "Two-dimensional shape", as well as the description of the
#Shape, its area and volume.
#ThreeDimensionalShape 
#This is a more specific form of Shape and should derive from Shape. 
#It needs to include an override of the str() method which returns that this is a "Three-dimensional shape", as well as the description of the
#Shape, its area and volume.
#Square 
#This is a more specific form of a TwoDimensionalShape. 
#It needs an instance variable for storing side length. 
#It needs to include an override of the str() method which returns that this is a "Square", as well as all the details returned by the
#TwoDimensionalShape class. 
#It needs to provide an override for the area() method to return the calculated area of the Square.
#
#
#	Rectangle 
#This is a more specific form of a TwoDimensionalShape. 
#It needs instance variables for storing side length and width. 
#It needs to include an override of the str() method which returns that this is a "Rectangle", as well as all the details returned by the
#TwoDimensionalShape class. 
#It needs to provide an override for the area() method to return the calculated area of the Rectangle.
#
#
# Cube 
#This is a more specific form of a ThreeDimensionalShape. 
#It needs an instance variable for storing side length. 
#It needs to include an override of the str() method which returns that this is a "Cube", as well as all the details returned by the
#ThreeDimensionalShape class. 
#It needs to provide an override for the area() method to return the calculated area of the Cube. 
#It needs to provide an override for the volume() method to return the calculated volume of the Cube.
#
#
#Box 
#This is a more specific form of a ThreeDimensionalShape. 
#It needs instance variables for storing side length, width and height. 
#It needs to include an override of the str method which returns that this is a "Box", as well as all the details returned by the
#ThreeDimensionalShape class. 
#It needs to provide an override for the area() method to return the calculated area of the Box. 
#It needs to provide an override for the volume() method to return the calculated volume of the Box.
#In the main portion of the script, define a list and load a Square, Rectangle, Cube and Box into the list.
Demonstrate the power of polymorphism to output the details of each of these Shapes.
#Use a single call to Shape to display the number of Shapes created.
#
#
from Square import *
from Rectangle import *
from Cube import *
from Box import *

shapes = list()

shapes.append(Square("Square 1", 10))
shapes.append(Rectangle("Rectangle 1", 20, 10))
shapes.append(Cube("Cube 1", 10))
shapes.append(Box("Box 1", 20, 10, 5))

print("Number of shapes: ", Shape.count)
print("-" * 50)

for current in shapes:
    print(current)
    print("-" * 50)
